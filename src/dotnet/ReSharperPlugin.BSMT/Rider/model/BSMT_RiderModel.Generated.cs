//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace ReSharperPlugin.BSMT_Rider.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: BSMT-RiderModel.kt:12</p>
  /// </summary>
  public class BSMT_RiderModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdCall<Unit, ConfigSettings> GetUserSettings => _GetUserSettings;
    [NotNull] public IRdEndpoint<Unit, string[]> FoundBeatSaberLocations => _FoundBeatSaberLocations;
    
    //private fields
    [NotNull] private readonly RdCall<Unit, ConfigSettings> _GetUserSettings;
    [NotNull] private readonly RdCall<Unit, string[]> _FoundBeatSaberLocations;
    
    //primary constructor
    private BSMT_RiderModel(
      [NotNull] RdCall<Unit, ConfigSettings> getUserSettings,
      [NotNull] RdCall<Unit, string[]> foundBeatSaberLocations
    )
    {
      if (getUserSettings == null) throw new ArgumentNullException("getUserSettings");
      if (foundBeatSaberLocations == null) throw new ArgumentNullException("foundBeatSaberLocations");
      
      _GetUserSettings = getUserSettings;
      _FoundBeatSaberLocations = foundBeatSaberLocations;
      _GetUserSettings.ValueCanBeNull = true;
      _FoundBeatSaberLocations.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("getUserSettings", _GetUserSettings));
      BindableChildren.Add(new KeyValuePair<string, object>("foundBeatSaberLocations", _FoundBeatSaberLocations));
    }
    //secondary constructor
    private BSMT_RiderModel (
    ) : this (
      new RdCall<Unit, ConfigSettings>(ReadVoidNullable, WriteVoidNullable, ConfigSettings.Read, ConfigSettings.Write),
      new RdCall<Unit, string[]>(ReadVoidNullable, WriteVoidNullable, ReadStringArray, WriteStringArray)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<Unit> ReadVoidNullable = JetBrains.Rd.Impl.Serializers.ReadVoid.NullableClass();
    public static CtxReadDelegate<string[]> ReadStringArray = JetBrains.Rd.Impl.Serializers.ReadString.Array();
    
    public static  CtxWriteDelegate<Unit> WriteVoidNullable = JetBrains.Rd.Impl.Serializers.WriteVoid.NullableClass();
    public static  CtxWriteDelegate<string[]> WriteStringArray = JetBrains.Rd.Impl.Serializers.WriteString.Array();
    
    protected override long SerializationHash => -5354681891147381364L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(BSMT_RiderModel), BSMT_RiderModel.RegisterDeclaredTypesSerializers);
    }
    
    public BSMT_RiderModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("BSMT_RiderModel"));
      this.BindTopLevel(lifetime, protocol, "BSMT_RiderModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("BSMT_RiderModel (");
      using (printer.IndentCookie()) {
        printer.Print("getUserSettings = "); _GetUserSettings.PrintEx(printer); printer.Println();
        printer.Print("foundBeatSaberLocations = "); _FoundBeatSaberLocations.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: BSMT-RiderModel.kt:14</p>
  /// </summary>
  public sealed class ConfigSettings : IPrintable, IEquatable<ConfigSettings>
  {
    //fields
    //public fields
    public bool IsDefaultBeatSaberLocation {get; private set;}
    [CanBeNull] public string DefaultBeatSaberLocation {get; private set;}
    [NotNull] public string[] ConfiguredBeatSaberLocations {get; private set;}
    
    //private fields
    //primary constructor
    public ConfigSettings(
      bool isDefaultBeatSaberLocation,
      [CanBeNull] string defaultBeatSaberLocation,
      [NotNull] string[] configuredBeatSaberLocations
    )
    {
      if (configuredBeatSaberLocations == null) throw new ArgumentNullException("configuredBeatSaberLocations");
      
      IsDefaultBeatSaberLocation = isDefaultBeatSaberLocation;
      DefaultBeatSaberLocation = defaultBeatSaberLocation;
      ConfiguredBeatSaberLocations = configuredBeatSaberLocations;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out bool isDefaultBeatSaberLocation, [CanBeNull] out string defaultBeatSaberLocation, [NotNull] out string[] configuredBeatSaberLocations)
    {
      isDefaultBeatSaberLocation = IsDefaultBeatSaberLocation;
      defaultBeatSaberLocation = DefaultBeatSaberLocation;
      configuredBeatSaberLocations = ConfiguredBeatSaberLocations;
    }
    //statics
    
    public static CtxReadDelegate<ConfigSettings> Read = (ctx, reader) => 
    {
      var isDefaultBeatSaberLocation = reader.ReadBool();
      var defaultBeatSaberLocation = ReadStringNullable(ctx, reader);
      var configuredBeatSaberLocations = ReadStringArray(ctx, reader);
      var _result = new ConfigSettings(isDefaultBeatSaberLocation, defaultBeatSaberLocation, configuredBeatSaberLocations);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<string[]> ReadStringArray = JetBrains.Rd.Impl.Serializers.ReadString.Array();
    
    public static CtxWriteDelegate<ConfigSettings> Write = (ctx, writer, value) => 
    {
      writer.Write(value.IsDefaultBeatSaberLocation);
      WriteStringNullable(ctx, writer, value.DefaultBeatSaberLocation);
      WriteStringArray(ctx, writer, value.ConfiguredBeatSaberLocations);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<string[]> WriteStringArray = JetBrains.Rd.Impl.Serializers.WriteString.Array();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ConfigSettings) obj);
    }
    public bool Equals(ConfigSettings other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return IsDefaultBeatSaberLocation == other.IsDefaultBeatSaberLocation && Equals(DefaultBeatSaberLocation, other.DefaultBeatSaberLocation) && ConfiguredBeatSaberLocations.SequenceEqual(other.ConfiguredBeatSaberLocations);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + IsDefaultBeatSaberLocation.GetHashCode();
        hash = hash * 31 + (DefaultBeatSaberLocation != null ? DefaultBeatSaberLocation.GetHashCode() : 0);
        hash = hash * 31 + ConfiguredBeatSaberLocations.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ConfigSettings (");
      using (printer.IndentCookie()) {
        printer.Print("isDefaultBeatSaberLocation = "); IsDefaultBeatSaberLocation.PrintEx(printer); printer.Println();
        printer.Print("defaultBeatSaberLocation = "); DefaultBeatSaberLocation.PrintEx(printer); printer.Println();
        printer.Print("configuredBeatSaberLocations = "); ConfiguredBeatSaberLocations.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
